package me.croabeast.takion.message.chat;

import lombok.RequiredArgsConstructor;
import me.croabeast.takion.TakionLib;
import me.croabeast.common.util.ArrayUtils;
import me.croabeast.common.util.Exceptions;
import net.md_5.bungee.api.chat.ClickEvent;
import org.apache.commons.lang.StringUtils;
import org.bukkit.entity.Player;
import org.jetbrains.annotations.NotNull;

import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Objects;

/**
 * Represents a chat click event that can be used to trigger actions when a player clicks on chat text.
 * <p>
 * The {@code ChatClick} class implements the {@link ChatEvent} interface for {@link ClickEvent} objects.
 * It uses a {@link TakionLib} instance to process the provided message, and it supports different types
 * of click actions defined in its nested {@link Action} enum.
 * </p>
 * <p>
 * The message provided to the constructor is expected to follow the format:
 * <pre><code>
 * action:message
 * </code></pre>
 * where "action" corresponds to a valid click action (e.g., "run", "url", "file", "suggest", etc.)
 * and "message" is the input text to be processed.
 * </p>
 *
 * @see ChatEvent
 * @see ClickEvent
 * @see TakionLib
 */
@RequiredArgsConstructor
public final class ChatClick implements ChatEvent<ClickEvent> {

    /**
     * The TakionLib instance used to process and replace placeholders in the click message.
     */
    private final TakionLib lib;

    /**
     * The click action to be executed when the chat element is clicked.
     */
    final Action action;

    /**
     * The message or input associated with the click event.
     */
    final String string;

    /**
     * Constructs a new {@code ChatClick} instance using the provided TakionLib instance and message.
     * <p>
     * The message should be in the format "action:message". If the colon is not present, the message
     * part defaults to an empty string.
     * </p>
     *
     * @param lib     the TakionLib instance (must not be {@code null}).
     * @param message the input string in the format "action:message" (must not be blank).
     * @throws NullPointerException if {@code lib} is {@code null} or if {@code message} is blank.
     */
    public ChatClick(TakionLib lib, String message) {
        this.lib = Objects.requireNonNull(lib);

        Exceptions.validate(StringUtils::isNotBlank, message);
        String[] array = message.replace("\"", "").split(":", 2);

        this.action = Action.from(array[0]);
        this.string = array.length == 1 ? "" : array[1];
    }

    /**
     * Creates a {@link ClickEvent} based on this chat click.
     * <p>
     * The event is generated by replacing any placeholders in the stored message using the provided player's context.
     * </p>
     *
     * @param parser the player that acts as the context for replacing placeholders.
     * @return a new {@link ClickEvent} configured with the action and processed message.
     */
    @NotNull
    public ClickEvent createEvent(Player parser) {
        return new ClickEvent(action.asBukkit(), lib.replace(parser, string));
    }

    /**
     * Checks whether the stored message is empty.
     *
     * @return {@code true} if the message is blank; {@code false} otherwise.
     */
    @Override
    public boolean isEmpty() {
        return StringUtils.isBlank(string);
    }

    /**
     * Returns a string representation of this ChatClick.
     *
     * @return a string describing the action and the input message.
     */
    @Override
    public String toString() {
        return "{action=" + action + ", input='" + string + "'}";
    }

    /**
     * Represents the various actions that can be executed when a chat click event occurs.
     * <p>
     * Each action encapsulates a {@link ClickEvent.Action} (from the Bungee API) and a list of associated names,
     * allowing for flexible input when specifying an action.
     * </p>
     */
    public enum Action {
        /**
         * Executes a command when clicked.
         */
        RUN_CMD(ClickEvent.Action.RUN_COMMAND, "click", "run"),

        /**
         * Opens a URL when clicked.
         */
        OPEN_URL(ClickEvent.Action.OPEN_URL, "url"),

        /**
         * Opens a file when clicked.
         */
        OPEN_FILE(ClickEvent.Action.OPEN_FILE, "file"),

        /**
         * Suggests a command in the chat input when clicked.
         */
        SUGGEST_CMD(ClickEvent.Action.SUGGEST_COMMAND, "suggest"),

        /**
         * Changes the page in a multi-page display.
         */
        CHANGE_PAGE(ClickEvent.Action.CHANGE_PAGE),

        /**
         * Copies text to the clipboard when clicked.
         */
        CLIPBOARD(ClickEvent.Action.COPY_TO_CLIPBOARD, "copy");

        /**
         * The Bungee API ClickEvent.Action associated with this action.
         */
        private final ClickEvent.Action bukkit;

        /**
         * A list of names (aliases) that represent this action.
         */
        private final List<String> names = new LinkedList<>();

        /**
         * Constructs a new Action with the given Bungee API action and optional alias names.
         *
         * @param bukkit the ClickEvent.Action from the Bungee API.
         * @param extras optional alias names for this action.
         */
        Action(ClickEvent.Action bukkit, String... extras) {
            this.bukkit = bukkit;
            names.add(name().toLowerCase(Locale.ENGLISH));

            if (!ArrayUtils.isArrayEmpty(extras))
                names.addAll(ArrayUtils.toList(extras));
        }

        /**
         * Returns the Bungee API {@link ClickEvent.Action} associated with this action.
         *
         * @return the Bungee API ClickEvent.Action.
         */
        public ClickEvent.Action asBukkit() {
            return bukkit;
        }

        /**
         * Returns the primary name of this action.
         *
         * @return the primary name as a String.
         */
        @Override
        public String toString() {
            return names.get(0);
        }

        /**
         * Converts a given name into its corresponding {@code Action}.
         * <p>
         * If the provided name is blank or does not match any defined actions, {@code SUGGEST_CMD} is returned by default.
         * </p>
         *
         * @param name the name to convert.
         * @return the matching {@code Action}, or {@code SUGGEST_CMD} if no match is found.
         */
        public static Action from(String name) {
            if (StringUtils.isBlank(name)) return SUGGEST_CMD;

            for (Action type : values()) {
                String temp = name.toLowerCase(Locale.ENGLISH);
                if (type.names.contains(temp)) return type;
            }
            return SUGGEST_CMD;
        }
    }
}
